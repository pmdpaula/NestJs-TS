// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  item Item[]

  @@map("category")
}

model Item {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  value      Float
  quantity   Float
  unity      String
  boughtDate DateTime
  stock      Boolean
  category   Category?    @relation(fields: [categoryId], references: [id])
  categoryId String?      @db.ObjectId
  recipeItem RecipeItem[]

  @@unique([name, boughtDate])
  @@map("item")
}

model RecipeItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity    Float
  value       Float?
  observation String?
  Item        Item     @relation(fields: [itemId], references: [id])
  itemId      String   @db.ObjectId
  recipe      Recipe[] @relation(fields: [recipeId], references: [id])
  recipeId    String[] @db.ObjectId

  @@map("recipeItem")
}

model Recipe {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  description          String?
  creationDate         DateTime
  lastModificationDate DateTime?
  recipeItems          RecipeItem[] @relation(fields: [recipeItemId], references: [id])
  recipeItemId         String[]     @db.ObjectId
  project              Project[]

  @@unique([name, creationDate])
  @@map("recipe")
}

model Client {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName        String
  surname          String?
  cellphone1       String?
  cellphone2       String?
  description      String?
  address          String?
  city             String?
  country          String?
  eventPlanner     Boolean
  relationalClient Client?   @relation("ResponsiblePerson", fields: [clientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  client           Client[]  @relation("ResponsiblePerson")
  clientId         String?   @db.ObjectId
  project          Project[] @relation(name: "ClientId")
  projectPlanner   Project[] @relation(name: "EventPlanner")
  // Project          Project[]

  @@map("client")
}

model EventType {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  project     Project[]

  @@map("eventType")
}

model Project {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  deliveryData     DateTime
  deliveryMode     String
  description      String?
  extraDescription String?
  extraValue       Float?
  isActive         Boolean
  soldValue        Float
  eventType        EventType @relation(fields: [eventTypeId], references: [id])
  eventTypeId      String    @db.ObjectId
  recipe           Recipe?   @relation(fields: [recipeId], references: [id])
  recipeId         String?   @db.ObjectId
  client           Client?   @relation(name: "ClientId", fields: [clientId], references: [id])
  clientId         String?   @db.ObjectId
  eventPlanner     Client?   @relation(name: "EventPlanner", fields: [plannerId], references: [id])
  plannerId        String?   @db.ObjectId
  payment          Payment[]

  @@unique([name, deliveryData])
  @@map("project")
}

model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  value       Float
  description String?
  paymentDate DateTime
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String   @db.ObjectId

  @@map("payment")
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  // username  String  @unique
  email     String  @unique
  password  String
  firstName String
  surname   String?
  token     String?
  role      Role[]

  // @@unique([username, email])
  @@map("user")
}

model Role {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String  @unique
  level  Int?
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  @@map("role")
}
